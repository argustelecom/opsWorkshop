package ru.argustelecom.box.env.lifecycle.api.definition;

import ru.argustelecom.box.env.lifecycle.api.LifecycleState;

/**
 * Конечная точка - это выход из маршрута, пройдя в который бизнес-объект завершит свою текущую стадию жизненного цикла
 * и начнет новую.
 * 
 * <p>
 * Выходы из маршрута всегда условные. Если условие выхода из маршрута на конкретной конечной точке не определено, то
 * такой выход считается выходом по умолчанию. Допустим только один выход по умолчанию, все остальные обязаны быть
 * условными.
 * 
 * <p>
 * Выход из маршрута инкапсулирует {@linkplain LifecycleValidator правила валидации} и {@linkplain LifecycleAction
 * бизнес-операции}, а также {@linkplain LifecycleVariables переменные контекста}. На фазе валидации все описанные
 * валидаторы выполняются в том порядке, в котором они задекларированы в жизненном цикле. Аналогчно происходит и с
 * бизнес-операциями -- они выполняются в том порядке, в котором задекларированы.
 * 
 * <p>
 * В процессе смены состояния бизнес-объекта из специализированного UI может потребоваться ввод пользователем значений
 * переменных задекларированных для текущей конечной точки. За возможность такого ввода отвечает флаг silent. Если
 * silent == true, то специализированный UI не покажет для пользователя форму ввода значений этих переменных, даже если
 * они есть. Если silent == false, то специализированный UI, напротив, покажет форму ввода значений этих переменных,
 * даже если они не определены. На первый взгляд такое поведение кажется нелогичным, однако оно введено из-за того, что
 * специализированный UI имеет точки расширения для возможности хардкодных вставок (например, в процессе активации
 * договора выбрать лицевой счет, на котором нужно создать и активировать подписки на продукты, фигурирующие в этом
 * договоре). Факт наличия таких хардкодных точек расширения из специализированного UI отследить невозможно, поэтому
 * такое поведение обрабатывается явно при помощи флага silent. Таким образом, алгоритм настройки silent следующий: если
 * определены переменные или есть хардкодные вставки, то укажи silent = false. В противном случае не трогай silent, т.к.
 * по умолчанию все переходы считаются тихими, т.е. silent == true
 * 
 * @param <S>
 *            - тип состояния бизнес-объекта жизненного цикла
 */
public interface LifecycleEndpoint<S extends LifecycleState<S>> {

	/**
	 * Возвращает состояние, в которое бизнес-объект перейдет в случае маршрутизации в текущую конечную точку маршрута
	 */
	S getDestination();

	/**
	 * Возвращает объект, инкапсулирующий все декларации переменных, определенных для текущей конечной точки маршрута
	 */
	LifecycleVariables getVariables();

	/**
	 * Возвращает true, если текущая конечная точка работает в "тихом" режиме, т.е. без взаимодействия с пользователем
	 */
	boolean isSilent();

	/**
	 * Возвращает true, если текущая конечная точка является выходом по умолчанию. Значение всегда противоположно
	 * значению свойства {@linkplain #hasRoutingCondition()}
	 */
	boolean isDefault();

	/**
	 * Возвращает true, если текущая конечная точка определяет условие выхода. Значение всегда противоположно значению
	 * свойства {@linkplain #isDefault()}
	 */
	boolean hasRoutingCondition();

	/**
	 * Возвращает true, если текущая конечная точка содержит {@linkplain LifecycleValidator правила валидации}. Доступ
	 * непосредственно к правилам валидации из публичного интерфейса закрыт, т.к. бизнес код никогда не должен
	 * самостоятельно, в обход фреймворка жизненного цикла, выполнять какие-либо проверки
	 */
	boolean hasValidators();

	/**
	 * Возвращает true, если текущая конечная точка содержит {@linkplain LifecycleAction бизнес-операции}. Доступ
	 * непосредственно к бизнес-операциям из публичного интерфейса закрыт, т.к. бизнес код никогда не должен
	 * самостоятельно, в обход фреймворка жизненного цикла, выполнять какие-либо действия
	 */
	boolean hasActions();

}