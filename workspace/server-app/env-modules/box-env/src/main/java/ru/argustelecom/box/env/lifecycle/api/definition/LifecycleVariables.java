package ru.argustelecom.box.env.lifecycle.api.definition;

import java.io.Serializable;
import java.util.Collection;

import ru.argustelecom.box.env.type.model.TypeProperty;

/**
 * Инкапсулирует определения переменных жизненного цикла. Применяется в рамках конченой точки маршрута жизненного цикла.
 * Содержит методы, позволяюшие объявить новую переменную, получить определение объявленной ранее переменной по ключевым
 * признакам (ключевому слову переменной или {@linkplain LifecycleVariable определителю} переменной), проверить,
 * объявлена ли та или иная переменная и т.д.
 * 
 * @param <S>
 *            - тип состояния бизнес-объекта жизненного цикла
 * @param <O>
 *            - тип бизнес-объекта жизненного цикла
 */
public interface LifecycleVariables {

	/**
	 * Возвращает true если не объявлено ни одной переменной.
	 */
	boolean isEmpty();

	/**
	 * Возвращает true, если объявлена переменная любого типа с указанным ключевым словом.
	 * 
	 * @param keyword
	 *            - ключевое слово переменной
	 * 
	 * @return true если такая переменная объявлена
	 */
	boolean isDefined(Serializable keyword);

	/**
	 * Возвращает true, если объявлена переменная, описанная указанным определителем переменной.
	 * 
	 * @param var
	 *            - {@linkplain LifecycleVariable определитель} переменной
	 * 
	 * @return true если такая переменная объявлена
	 */
	<V, P extends TypeProperty<V>> boolean isDefined(LifecycleVariable<P> var);

	/**
	 * Возвращает коллекцию всех объявленных переменных или пустую коллекцию, если ни одной переменной не объявлено
	 */
	Collection<TypeProperty<?>> getVariableDefs();

	/**
	 * Возвращает определение переменной по ее ключевому слову. В этом случае переменная полиморфно представлена в виде
	 * базового супертипа всех свойств спецификации и вызывающему нужно будет каким-либо образом самостоятельно
	 * интерпретировать этот результат.
	 * 
	 * @param keyword
	 *            - ключевое слово переменной
	 * 
	 * @return Определение переменной или null, если нет переменной с указанным ключевым словом
	 */
	TypeProperty<?> getVariableDef(Serializable keyword);

	/**
	 * Возвращает определение переменной по ее ключевому слову. Результат будет приведен к указанному типу переменной.
	 * Если типы несовместимы, например, для TextProperty указали NumberProperty, то будет брошено соответствующее
	 * исключение.
	 * 
	 * @param variableClass
	 *            - тип запрашиваемой переменной
	 * @param keyword
	 *            - ключевое слово переменной
	 * 
	 * @return Определение переменной, приведенное к указанному типу, или null, если нет переменной с указанным ключевым
	 *         словом
	 */
	<P extends TypeProperty<?>> P getVariableDef(Class<P> variableClass, Serializable keyword);

	/**
	 * Возвращает определение переменной по ее указанному {@linkplain LifecycleVariable определителю}. Результат будет
	 * приведен к конкретному типу, т.к. эта информация имеется в определителе. Самый безопасный метод по работе с
	 * определениями переменных (всегда вернет либо правильный результат либо null), рекомендуется к использованию.
	 * 
	 * @param var
	 *            - {@linkplain LifecycleVariable определитель} переменной
	 * 
	 * @return Определение переменной, приведенное к нужному типу, или null, если нет такой переменной
	 */
	<V, P extends TypeProperty<V>> P getVariableDef(LifecycleVariable<P> var);

}