package ru.argustelecom.box.env.lifecycle.api;

import java.io.Serializable;
import java.util.Objects;

/**
 * Описывает тип состояния бизнес-объекта. Представляет собой некоторую стадию, в которой находится бизнес-объект в
 * конкретный момент времени. Количество допустимых стадий и состояний бизнес-объекта всегда строго регламентировано и
 * определено с одной стороны бизнес-требованиями, с другой стороны - программным кодом (т.е. пользователи никак не
 * могут повлиять на количество стадий жизненного цикла, например, добавив свою).
 * 
 * <p>
 * На графе жизненного цикла состояния ЖЦ являются вершинами.
 * 
 * <p>
 * Тип состояния жизненного цикла неразрывно связан с типом объекта жизненного цикла и не может быть использовано для
 * другого типа объекта. С другой стороны, тип состояния может быть общим для нескольких типов бизнес-объектов, имеющих
 * общего предка.
 * 
 * <p>
 * В качестве реализации состояния бизнес-объекта может быть использован любой класс, реализующий этот интерфейс, однако
 * рекомендуется использовать для этих целей {@code Enum}, т.к. этот тип описывает конечный набор констант, что наиболее
 * полно соответствует сути "набора состояний бизнес-объекта".
 * 
 * @param <S>
 *            - тип состояния бизнес-объекта жизненного цикла
 */
public interface LifecycleState<S> {

	/**
	 * Возвращает перечень всех возможных состояний бизнес-объекта. Этот метод должен всегда возвращать результат --
	 * непустую коллекцию.
	 * 
	 * @return всегда не пустую коллекцию всех возможных состояний
	 */
	Iterable<S> getStates();

	/**
	 * Возвращает уникальный ключ текущего состояния бизнес-объекта. Если для реализации состояния бизнес-объекта
	 * используется {@code Enum}, то этот метод должен возвращать указатель на самого себя, т.е. {@code this}. Этот
	 * метод не может вернуть {@code null} ни при каких обстоятельствах.
	 * 
	 * @return уникальный ключ текущего состояния
	 */
	Serializable getKey();

	/**
	 * Возвращает человеко-читаемое название текущего состояния бизнес-объекта.
	 * 
	 * @return название текущего состояния
	 */
	String getName();

	/**
	 * Возвращает уникальный квалификатор текущего состояния. Этот метод используется фреймворком жизненного цикла для
	 * квалификации CDI событий, которые испускаются в процессе выполнения перехода по жизненному циклу. Например, пусть
	 * имеется тип состояния бизнес-объекта и тип бизнес-объекта:
	 * 
	 * <pre>
	 * <code>
	 * public enum SampleState implements LifecycleState&lt;SampleState&gt; {
	 *    DRAFT("Черновик"), ACTIVE("Активен"), CLOSED("Закрыт");
	 *    
	 *    ...
	 *    
	 *    {@literal @}Override
	 *    public String getEventQualifier() {
	 *        return tnis.name(); // Для квалификации будет использовано имя константы самого enum
	 *    }	
	 * }
	 * 
	 * {@literal @}EntityWrapperDef(name = ISample.WRAPPER_NAME)
	 * public class Sample implements LifecycleObject&lt;SampleState, Sample&gt; {
	 *    ...
	 * }
	 * 
	 * public class ISample extends IEntity {
	 *    ...
	 * }   
	 * </code>
	 * </pre>
	 * 
	 * В процессе выполнения жизненного цикла будет отправлено одно из CDI событий, информирующих внешний мир о факте
	 * или этапе выполенения жизненного цикла, допустим, что бизнес-объект покидает состояние {@code SampleState.DRAFT}.
	 * Важно! Событие будет сгенерировано только в том случае, если бизнес-объект поддерживается на уровне публичного
	 * языка (как в текущем примере). Для того, чтобы отловить это событие необходимо реализовать метод обсервер
	 * 
	 * <pre>
	 * <code>
	 * {@literal @}DomainService
	 * public class SampleEventListener {
	 *    protected void onLeavesState({@literal @}Observes {@literal @}RoutedFrom(state="DRAFT") ISample object) {
	 *        ...
	 *    }
	 * }
	 * </code>
	 * </pre>
	 * 
	 * @return квалификатор CDI события
	 */
	String getEventQualifier();

	default boolean oneOf(Iterable<S> states) {
		for (S state : states) {
			if (Objects.equals(state, this)) {
				return true;
			}
		}
		return false;
	}

}
